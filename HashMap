class MyHashMap(object):

    def __init__(self):
        self.bucket = 1000
        self.bucketitems = 1000
        self.storage = [None] * self.bucket

    def hash1(self, key: int) -> int:
        return key % self.bucket

    def hash2(self, key: int) -> int:
        return key // self.bucketitems

    def put(self, key: int, value: int) -> None:
        """
        Inserts a (key, value) pair into the HashMap.
        """
        bucket = self.hash1(key)
        bucketitems = self.hash2(key)
        
        if self.storage[bucket] is None:
            if bucket == 0:
                self.storage[bucket] = [None] * (self.bucketitems + 1)  # Handle edge case for bucket 0
            else:
                self.storage[bucket] = [None] * self.bucketitems
        
        self.storage[bucket][bucketitems] = value

    def get(self, key: int) -> int:
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
        """
        bucket = self.hash1(key)
        bucketitems = self.hash2(key)
        
        if self.storage[bucket] is None or self.storage[bucket][bucketitems] is None:
            return -1
        return self.storage[bucket][bucketitems]

    def remove(self, key: int) -> None:
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key.
        """
        bucket = self.hash1(key)
        bucketitems = self.hash2(key)
        
        if self.storage[bucket] is None:
            return
        self.storage[bucket][bucketitems] = None
